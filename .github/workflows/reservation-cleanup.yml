name: Reservation Cleanup

on:
  schedule:
    # Every 30 minutes
    - cron: "*/30 * * * *"
  workflow_dispatch:
    inputs:
      ttlMinutes:
        description: "TTL in minutes to treat reservations as stale"
        required: false
        default: "30"

jobs:
  call-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Call cleanup endpoint
        env:
          CLEANUP_URL: https://event-management-three-tau.vercel.app/api/admin/release-stale-reservations
          ADMIN_CLEANUP_SECRET: ${{ secrets.ADMIN_CLEANUP_SECRET }}
          # If manually triggered, allow overriding TTL via input; otherwise default to 30
          TTL_MINUTES: ${{ github.event_name == 'workflow_dispatch' && inputs.ttlMinutes || vars.RESERVATION_TTL_MINUTES || '30' }}
        run: |
          set -euo pipefail
          echo "Calling: $CLEANUP_URL?ttlMinutes=${TTL_MINUTES}"
          if [ -z "${ADMIN_CLEANUP_SECRET:-}" ]; then
            echo "ADMIN_CLEANUP_SECRET not set. Cannot authenticate to cleanup endpoint.";
            exit 1
          fi
          # Validate TTL
          if ! [[ "$TTL_MINUTES" =~ ^[0-9]+$ ]]; then
            echo "Invalid TTL_MINUTES '$TTL_MINUTES'. Using 30."
            TTL_MINUTES=30
          fi

          echo "::group::Reservation cleanup request"
          echo "Event: ${{ github.event_name }}"
          echo "TTL_MINUTES: $TTL_MINUTES"
          echo "Calling cleanup endpoint (response will follow)"
          echo "::endgroup::"

          set +e
          RESP=$(curl -sS -i \
            -H "x-cron-secret: ${ADMIN_CLEANUP_SECRET}" \
            -w "\nHTTP_STATUS=%{http_code}\n" \
            "${CLEANUP_URL}?ttlMinutes=${TTL_MINUTES}" 2>&1)
          CODE=$?
          set -e

          echo "$RESP"

          # Extract status code
          STATUS=$(echo "$RESP" | grep -Eo 'HTTP_STATUS=[0-9]+' | cut -d= -f2 || echo "0")
          echo "HTTP Status: $STATUS"

          {
            echo "Reservation Cleanup"
            echo
            echo "- TTL minutes: $TTL_MINUTES"
            echo "- Triggered by: ${{ github.event_name }}"
            echo
            echo "Response:"
            echo "\`\`\`"
            echo "$RESP"
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ $CODE -ne 0 ] || [ "$STATUS" -lt 200 ] || [ "$STATUS" -ge 300 ]; then
            echo "Cleanup call failed with curl code $CODE and HTTP status $STATUS"
            exit 1
          fi

          echo "Cleanup call done."
